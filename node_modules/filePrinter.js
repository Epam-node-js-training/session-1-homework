var fs = require('fs');
var async = require("async");
var mime = require("mime");
var df = require("DirectoryFiles");
var html = require("htmlFormatter");


function FilePrinter(){
    //empty constructor
}

//Method finds information about files state and then prints them to response
function printAllFiles(res, currentDirFiles){
	async.map(currentDirFiles.relativePathList, fs.stat, function(err, results){
	    if (err){
	        res.write(err);
	        res.end(html.HTMLFormatter.endDocument());    
	        return;
	    }
	    
        // results is now an array of stats for each file
        res.write(html.HTMLFormatter.startList());
        for (var i in results){
            if (results[i]!== undefined && results[i].isDirectory()){
                res.write(html.HTMLFormatter.printDirectoryInList(currentDirFiles,i));
            }else{
                res.write(html.HTMLFormatter.printFileInList(currentDirFiles,i));
            }
        } 
        res.write(html.HTMLFormatter.endList());
        res.end(html.HTMLFormatter.endDocument());
    });    
}

//Method prints all files from given current path to response object.
FilePrinter.listAll = function (res,startFullPath,currentRelativePath){
    
    res.write(html.HTMLFormatter.startDocument());
    
	fs.readdir(startFullPath, function (err,fileNameArr){
		if (err) {
			 res.write(html.HTMLFormatter.readDirError());
			 res.end(html.HTMLFormatter.endDocument());
			 return;
		}
		
		//copy array with file names
		var relativePathArr = new Array(fileNameArr.length);
		var filesMimeArr = new Array(fileNameArr.length);
		
		for (var f in fileNameArr){
		    //add prefix path to file names
		    relativePathArr[f] = currentRelativePath + fileNameArr[f];
		    filesMimeArr[f] = mime.lookup(relativePathArr[f]);
		}
		var currentDirFiles = new df.DirectoryFiles(fileNameArr,relativePathArr,filesMimeArr,currentRelativePath);

        printAllFiles(res,currentDirFiles);
		
	});
    
}

module.exports = FilePrinter;